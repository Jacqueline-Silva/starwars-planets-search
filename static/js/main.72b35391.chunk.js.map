{"version":3,"sources":["context/PlanetsContext.js","services/fecthAPI.js","context/PlanetsProvider.js","components/Table.js","components/Filters.js","App.js","index.js"],"names":["PlanetsContext","createContext","fetchAPI","fetch","response","json","data","results","PlanetsProvider","children","useState","setData","planets","setPlanets","dataFilters","setDataFilters","orderPlanets","setOrderPlanets","sortName","a","b","name","useEffect","dataPlanets","sort","getPlanets","length","reduce","acc","index","column","comparison","value","newDataPlanets","planet","filter","copyData","sortASC","sortDESC","orderedPlanets","Provider","dataFilterName","filterName","toLowerCase","includes","filterByNumericValues","filters","removeFilter","prev","e","id","Table","useContext","dataFilterKeys","dados","Object","keys","chave","className","border","map","key","toUpperCase","values","dataFilterValues","data-testid","Filters","setId","setColumn","setComparison","setValue","applied","setApplied","arrayColumns","setArrayColumns","order","setOrder","attFilters","target","sorted","htmlFor","type","onChange","onClick","prevState","i","App","ReactDOM","render","document","getElementById"],"mappings":";4XAIeA,EAFQC,0B,yyMCFvB,IASeC,EATD,uCAAG,8FACH,iDADG,SAEQC,MADX,kDADG,cAETC,EAFS,gBAGIA,EAASC,OAHb,cAGTC,EAHS,OAIPC,EAAYD,EAAZC,QAJO,kBAMRA,GANQ,2CAAH,qD,yyMC+FCC,MA1Ff,YAAwC,IAAbC,EAAY,EAAZA,SACzB,EAAwBC,mBAAS,IAAjC,mBAAOJ,EAAP,KAAaK,EAAb,KACA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KACA,EAAsCH,mBAAS,IAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAwCL,mBAAS,IAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KAEMC,EAAW,SAACC,EAAGC,GAEnB,OAAOD,EAAEE,KAAOD,EAAEC,KAAO,GADJ,GAgEvB,OA5DAC,qBAAU,YACQ,uCAAG,oGACSpB,IADT,OACXqB,EADW,OAEjBZ,EAAQY,GACRV,EAAWU,EAAYC,KAAKN,IAHX,2CAAH,qDAKhBO,KACC,IAgBHH,qBAAU,WAaqB,IAAvBR,EAAYY,OACdb,EAAWC,EAAYa,QAZR,SAACC,EAAD,EAAqCC,GAAW,IAAxCC,EAAuC,EAAvCA,OAAQC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,MACrCC,EAAiB,SAACC,GACtB,MAAmB,cAAfH,GAAqCG,EAAOJ,GAAYE,EACzC,cAAfD,GAAqCG,EAAOJ,GAAYE,GACnDE,EAAOJ,MAAeE,GAIjC,OADc,IAAVH,IAAaD,EAAMtB,EAAK6B,OAAOF,IAC5BL,EAAIO,OAAOF,KAIsB,KAExCpB,EAAWP,KAId,CAACQ,EAAaR,IAEjBgB,qBAAU,YACe,WACrB,IAAQQ,EAAiBd,EAAjBc,OAAQN,EAASR,EAATQ,KACVY,EAAQ,YAAO9B,GACf+B,EAAUD,EAASZ,MAAK,SAACL,EAAGC,GAAJ,OAAUD,EAAEW,GAAUV,EAAEU,MAGtD,GAFAjB,EAAWwB,GAEE,SAATb,EAAiB,CACnB,IAAMc,EAAWF,EAASZ,MAAK,SAACL,EAAGC,GAAJ,OAAUA,EAAEU,GAAUX,EAAEW,MACvDjB,EAAWyB,IAGfC,KACC,CAACvB,EAAcV,IAGhB,kBAAC,EAAekC,SAAhB,CACER,MAAQ,CACNpB,UACAK,kBACAH,cACA2B,eAzDN,SAAwBC,GACtB,IAAMT,EAAiB3B,EAAK6B,QAAO,qBAAGd,KAC/BsB,cAAcC,SAASF,MAC9B7B,EAAWoB,IAuDPY,sBApDN,SAA+BC,EAASC,GACtC,OAAID,GAAWC,EACNhC,GAAe,SAACiC,GAAD,OAAUA,EAAKb,QAAO,SAACc,GAAD,OAAQA,EAAEC,MAAQJ,SAE3DC,GAAchC,EAAe,GAAD,mBAAKD,GAAL,CAAkBgC,KAC5B,IAAnBA,EAAQpB,OAAqBX,EAAe,SAAhD,MAkDIN,I,MC9BO0C,MApDf,WACE,IAAiB7C,EAAS8C,qBAAWpD,GAA7BY,QAER,SAASyC,EAAeC,GACtB,OAAOC,OAAOC,KAAKF,EAAM,IAAInB,QAAO,SAACsB,GAAD,MAAqB,cAAVA,KAOjD,OACE,yBAAKC,UAAU,kBACb,uCACkB,IAAhBpD,EAAKoB,OACH,UAEA,2BAAOiC,OAAO,OACZ,+BACE,4BAEIN,EAAe/C,GAAMsD,KAAI,SAACX,GAAD,OACvB,wBAAIY,IAAMZ,GAAMA,EAAEa,oBAK1B,+BAEIxD,EAAKsD,KAAI,SAAC1B,GAAD,OACP,wBAAI2B,IAAM3B,EAAOb,MAEbgC,EAAe/C,GAAMsD,KAAI,SAACC,GAAD,OAzB7C,SAA0B3B,EAAQ2B,GAChC,OAAON,OAAOQ,OAAO7B,GAAQC,QAAO,SAACH,GAAD,OAAWA,IAAUE,EAAO2B,MAyB5CG,CAAiB9B,EAAQ2B,GAAKD,KAAI,SAACX,GAAD,OAChC,wBACEY,IAAMZ,EACNgB,cAAchB,IAAMf,EAAOb,KAAO,cAAgB,IAEhD4B,iB,aC4LfiB,MAlOf,WACE,MAKId,qBAAWpD,GAJbiB,EADF,EACEA,gBACAwB,EAFF,EAEEA,eACA3B,EAHF,EAGEA,YACA+B,EAJF,EAIEA,sBAGF,EAAoBnC,mBAAS,GAA7B,mBAAOwC,EAAP,KAAWiB,EAAX,KACA,EAA4BzD,mBAAS,cAArC,mBAAOoB,EAAP,KAAesC,EAAf,KACA,EAAoC1D,mBAAS,aAA7C,mBAAOqB,EAAP,KAAmBsC,EAAnB,KACA,EAA0B3D,mBAAS,GAAnC,mBAAOsB,EAAP,KAAcsC,EAAd,KACA,EAA8B5D,oBAAS,GAAvC,mBAAO6D,EAAP,KAAgBC,EAAhB,KACA,EAAwC9D,mBAAS,CAC/C,aACA,iBACA,WACA,kBACA,kBALF,mBAAO+D,EAAP,KAAqBC,EAArB,KAOA,EAA0BhE,mBAAS,CACjCoB,OAAQ,aACRN,KAAM,QAFR,mBAAOmD,EAAP,KAAcC,EAAd,KA0CA,SAASC,EAAT,GAAiC,IAAXC,EAAU,EAAVA,OACpBjC,EAAsBiC,EAAO5B,GAAI,UAQnC,SAAS6B,EAAT,GAA6B,IAAXD,EAAU,EAAVA,OAChB,GAAkB,QAAdA,EAAO5B,IAA8B,SAAd4B,EAAO5B,GAChC,OAAO0B,EAAS,2BAAKD,GAAN,IAAanD,KAAMsD,EAAO5B,MAE3C0B,EAAS,2BAAKD,GAAN,IAAa7C,OAAQgD,EAAO9C,SAOtC,OACE,yBAAK0B,UAAU,WACb,uCACA,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,iBACb,2BAAOsB,QAAQ,iBAAf,OAEE,2BACEC,KAAK,OACL/B,GAAG,gBACHe,cAAY,cACZiB,SA5DZ,YAAuC,IAAXJ,EAAU,EAAVA,OAC1BrC,EAAgBqC,EAAO9C,MAAOW,oBA+D1B,yBAAKe,UAAU,yBACb,2BAAOsB,QAAQ,iBAAf,SAEE,4BACE3D,KAAK,SACL6B,GAAG,gBACHlB,MAAQF,EACRmC,cAAY,gBACZiB,SApEZ,YAAyC,IAAXJ,EAAU,EAAVA,OAC5BV,EAAUU,EAAO9C,SAsELyC,EAAab,KAAI,SAACX,GAAD,OAAO,4BAAQY,IAAMZ,GAAMA,QAIlD,2BAAO+B,QAAQ,qBAAf,aAEE,4BACE3D,KAAK,aACLW,MAAQD,EACRkC,cAAY,oBACZiB,SA7EZ,YAA6C,IAAXJ,EAAU,EAAVA,OAChCT,EAAcS,EAAO9C,SAlBL,CAAC,YAAa,YAAa,WAiGrB4B,KAAI,SAACX,GAAD,OAAO,4BAAQY,IAAMZ,GAAMA,QAI/C,2BAAO+B,QAAQ,SAAf,QAEE,2BACEC,KAAK,SACL5D,KAAK,QACLW,MAAQA,EACRiC,cAAY,eACZiB,SAxFZ,YAAwC,IAAXJ,EAAU,EAAVA,OAC3BR,EAASQ,EAAO9C,WA0FV,4BACEiD,KAAK,SACLhB,cAAY,gBACZkB,QA1FV,WACE,IAAMrC,EAAU,CACdI,KACApB,SACAC,aACAC,SAGFmC,GAAM,SAACnB,GAAD,OAAUA,EAAO,KACvBH,EAAsBC,GACtB4B,GAAgB,SAACU,GAAD,mBAAmBA,EAAUjD,QAAO,SAACc,GAAD,OAAOA,IAAMnB,SACjE0C,GAAW,KA4EL,WAQF,yBAAKd,UAAU,iBACb,2BAAOsB,QAAQ,iBAAf,SAEE,4BACE3D,KAAK,SACL6B,GAAG,gBACHe,cAAY,cACZiB,SAAWH,GA7HD,CACpB,aACA,iBACA,WACA,kBACA,iBA2H0BnB,KAAI,SAACX,GAAD,OAAO,4BAAQY,IAAMZ,GAAMA,QAInD,2BAAO+B,QAAQ,MAAMtB,UAAU,eAA/B,aAEE,2BACEuB,KAAK,QACL5D,KAAK,OACL6B,GAAG,MACHlB,MAAM,MACNiC,cAAY,wBACZP,UAAU,QACVwB,SAAWH,KAGf,2BAAOC,QAAQ,QAAf,cAEE,2BACEC,KAAK,QACL5D,KAAK,OACL6B,GAAG,OACHlB,MAAM,OACNiC,cAAY,yBACZP,UAAU,QACVwB,SAAWH,KAGf,4BACEE,KAAK,SACLhB,cAAY,qBACZkB,QA1GV,WACElE,EAAgB0D,KAsGV,UAUFJ,GAAWzD,EAAYY,OAAS,GAE9B,yBAAKgC,UAAU,gBAAf,kBAGI5C,EAAY8C,KAAI,SAACX,EAAGoC,GAAJ,OACd,yBAAKxB,IAAMwB,EAAIpB,cAAY,SAASP,UAAU,wBAA9C,UACMT,EAAEnB,OADR,YACkBmB,EAAElB,WADpB,YACkCkB,EAAEjB,OAClC,4BACEiD,KAAK,SACL/B,GAAKD,EAAEC,GACPiC,QAAUN,EACVnB,UAAU,oBAJZ,SAUN,6BACE,4BACEuB,KAAK,SACLhB,cAAY,wBACZkB,QAnJd,WACEtC,EAAsB,IACtB2B,GAAW,KA8ID,sBCtMCc,MAVf,WACE,OACE,kBAAC,EAAD,KACE,iDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.72b35391.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","const fetchAPI = async () => {\n  const url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n  const response = await fetch(url);\n  const data = await response.json();\n  const { results } = data;\n\n  return results;\n};\n\nexport default fetchAPI;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport fetchAPI from '../services/fecthAPI';\n\nfunction PlanetsProvider({ children }) {\n  const [data, setData] = useState([]);\n  const [planets, setPlanets] = useState([]);\n  const [dataFilters, setDataFilters] = useState([]);\n  const [orderPlanets, setOrderPlanets] = useState({});\n\n  const sortName = (a, b) => {\n    const numberMagic = -1;\n    return a.name > b.name ? 1 : numberMagic;\n  };\n\n  useEffect(() => {\n    const getPlanets = async () => {\n      const dataPlanets = await fetchAPI();\n      setData(dataPlanets);\n      setPlanets(dataPlanets.sort(sortName));\n    };\n    getPlanets();\n  }, []);\n\n  function dataFilterName(filterName) {\n    const newDataPlanets = data.filter(({ name }) => (\n      name.toLowerCase().includes(filterName)));\n    setPlanets(newDataPlanets);\n  }\n\n  function filterByNumericValues(filters, removeFilter) {\n    if (filters && removeFilter) {\n      return setDataFilters((prev) => prev.filter((e) => +e.id !== +filters));\n    }\n    if (!removeFilter) setDataFilters([...dataFilters, filters]);\n    if (filters.length === 0) return setDataFilters([]);\n  }\n\n  useEffect(() => {\n    const dataFiltered = () => {\n      const filtered = (acc, { column, comparison, value }, index) => {\n        const newDataPlanets = (planet) => {\n          if (comparison === 'maior que') return +(planet[column]) > (value);\n          if (comparison === 'menor que') return +(planet[column]) < (value);\n          return +(planet[column]) === +(value);\n        };\n\n        if (index === 0) acc = data.filter(newDataPlanets);\n        return acc.filter(newDataPlanets);\n      };\n\n      if (dataFilters.length !== 0) {\n        setPlanets(dataFilters.reduce(filtered, []));\n      } else {\n        setPlanets(data);\n      }\n    };\n    dataFiltered();\n  }, [dataFilters, data]);\n\n  useEffect(() => {\n    const orderedPlanets = () => {\n      const { column, sort } = orderPlanets;\n      const copyData = [...data];\n      const sortASC = copyData.sort((a, b) => a[column] - b[column]);\n      setPlanets(sortASC);\n\n      if (sort === 'DESC') {\n        const sortDESC = copyData.sort((a, b) => b[column] - a[column]);\n        setPlanets(sortDESC);\n      }\n    };\n    orderedPlanets();\n  }, [orderPlanets, data]);\n\n  return (\n    <PlanetsContext.Provider\n      value={ {\n        planets,\n        setOrderPlanets,\n        dataFilters,\n        dataFilterName,\n        filterByNumericValues,\n      } }\n    >\n      { children }\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = ({\n  children: PropTypes.any,\n}).isRequered;\n\nexport default PlanetsProvider;\n","import React, { useContext } from 'react';\nimport PlanetsContext from '../context/PlanetsContext';\nimport '../css/table.css';\n\nfunction Table() {\n  const { planets: data } = useContext(PlanetsContext);\n\n  function dataFilterKeys(dados) {\n    return Object.keys(dados[0]).filter((chave) => chave !== 'residents');\n  }\n\n  function dataFilterValues(planet, key) {\n    return Object.values(planet).filter((value) => value === planet[key]);\n  }\n\n  return (\n    <div className=\"table__planets\">\n      <h2>Planets</h2>\n      { data.length === 0\n        ? 'Loading'\n        : (\n          <table border=\"1px\">\n            <thead>\n              <tr>\n                {\n                  dataFilterKeys(data).map((e) => (\n                    <th key={ e }>{ e.toUpperCase() }</th>\n                  ))\n                }\n              </tr>\n            </thead>\n            <tbody>\n              {\n                data.map((planet) => (\n                  <tr key={ planet.name }>\n                    {\n                      dataFilterKeys(data).map((key) => (\n                        dataFilterValues(planet, key).map((e) => (\n                          <td\n                            key={ e }\n                            data-testid={ e === planet.name ? 'planet-name' : '' }\n                          >\n                            { e }\n                          </td>\n                        ))))\n                    }\n                  </tr>\n                ))\n              }\n            </tbody>\n          </table>\n        )}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useContext, useState } from 'react';\nimport PlanetsContext from '../context/PlanetsContext';\nimport '../css/filters.css';\n\nfunction Filters() {\n  const {\n    setOrderPlanets,\n    dataFilterName,\n    dataFilters,\n    filterByNumericValues,\n  } = useContext(PlanetsContext);\n\n  const [id, setId] = useState(0);\n  const [column, setColumn] = useState('population');\n  const [comparison, setComparison] = useState('maior que');\n  const [value, setValue] = useState(0);\n  const [applied, setApplied] = useState(false);\n  const [arrayColumns, setArrayColumns] = useState([\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ]);\n  const [order, setOrder] = useState({\n    column: 'population',\n    sort: 'ASC',\n  });\n  const optionsMM = ['maior que', 'menor que', 'igual a'];\n  const arrayColumns2 = [\n    'population',\n    'orbital_period',\n    'diameter',\n    'rotation_period',\n    'surface_water',\n  ];\n\n  function handleNameFilter({ target }) {\n    dataFilterName((target.value).toLowerCase());\n  }\n\n  function handleColumnFilter({ target }) {\n    setColumn(target.value);\n  }\n\n  function handleComparisonFilter({ target }) {\n    setComparison(target.value);\n  }\n  function handleValueFilter({ target }) {\n    setValue(target.value);\n  }\n\n  function sendFilters() {\n    const filters = {\n      id,\n      column,\n      comparison,\n      value,\n    };\n\n    setId((prev) => prev + 1);\n    filterByNumericValues(filters);\n    setArrayColumns((prevState) => [...prevState.filter((e) => e !== column)]);\n    setApplied(true);\n  }\n\n  function attFilters({ target }) {\n    filterByNumericValues(target.id, 'remove');\n  }\n\n  function resetFilters() {\n    filterByNumericValues([]);\n    setApplied(false);\n  }\n\n  function sorted({ target }) {\n    if (target.id === 'ASC' || target.id === 'DESC') {\n      return setOrder({ ...order, sort: target.id });\n    }\n    setOrder({ ...order, column: target.value });\n  }\n\n  function sendOrdered() {\n    setOrderPlanets(order);\n  }\n\n  return (\n    <nav className=\"filters\">\n      <h2>Filters</h2>\n      <div className=\"filters__numValue-sort\">\n        <div className=\"filters__name\">\n          <label htmlFor=\"setNameFilter\">\n            Name\n            <input\n              type=\"text\"\n              id=\"setNameFilter\"\n              data-testid=\"name-filter\"\n              onChange={ handleNameFilter }\n            />\n          </label>\n        </div>\n        <div className=\"filters__numericValue\">\n          <label htmlFor=\"column-filter\">\n            Column\n            <select\n              name=\"column\"\n              id=\"column-filter\"\n              value={ column }\n              data-testid=\"column-filter\"\n              onChange={ handleColumnFilter }\n            >\n              {\n                arrayColumns.map((e) => <option key={ e }>{ e }</option>)\n              }\n            </select>\n          </label>\n          <label htmlFor=\"comparison-filter\">\n            Comparison\n            <select\n              name=\"comparison\"\n              value={ comparison }\n              data-testid=\"comparison-filter\"\n              onChange={ handleComparisonFilter }\n            >\n              {\n                optionsMM.map((e) => <option key={ e }>{ e }</option>)\n              }\n            </select>\n          </label>\n          <label htmlFor=\"value\">\n            Value\n            <input\n              type=\"number\"\n              name=\"value\"\n              value={ value }\n              data-testid=\"value-filter\"\n              onChange={ handleValueFilter }\n            />\n          </label>\n          <button\n            type=\"submit\"\n            data-testid=\"button-filter\"\n            onClick={ sendFilters }\n          >\n            FILTER\n          </button>\n        </div>\n        <div className=\"filters__sort\">\n          <label htmlFor=\"column-filter\">\n            Column\n            <select\n              name=\"column\"\n              id=\"column-filter\"\n              data-testid=\"column-sort\"\n              onChange={ sorted }\n            >\n              {\n                arrayColumns2.map((e) => <option key={ e }>{ e }</option>)\n              }\n            </select>\n          </label>\n          <label htmlFor=\"ASC\" className=\"label-radio\">\n            Ascendente\n            <input\n              type=\"radio\"\n              name=\"sort\"\n              id=\"ASC\"\n              value=\"ASC\"\n              data-testid=\"column-sort-input-asc\"\n              className=\"radio\"\n              onChange={ sorted }\n            />\n          </label>\n          <label htmlFor=\"DESC\">\n            Descendente\n            <input\n              type=\"radio\"\n              name=\"sort\"\n              id=\"DESC\"\n              value=\"DESC\"\n              data-testid=\"column-sort-input-desc\"\n              className=\"radio\"\n              onChange={ sorted }\n            />\n          </label>\n          <button\n            type=\"submit\"\n            data-testid=\"column-sort-button\"\n            onClick={ sendOrdered }\n          >\n            SORT\n          </button>\n        </div>\n      </div>\n      {\n        applied && dataFilters.length > 0\n        && (\n          <div className=\"filters-list\">\n            Applied filter:\n            {\n              dataFilters.map((e, i) => (\n                <div key={ i } data-testid=\"filter\" className=\"filters-list__filter\">\n                  {`${e.column} ${e.comparison} ${e.value}`}\n                  <button\n                    type=\"button\"\n                    id={ e.id }\n                    onClick={ attFilters }\n                    className=\"btn-removeFilter\"\n                  >\n                    X\n                  </button>\n                </div>))\n            }\n            <div>\n              <button\n                type=\"button\"\n                data-testid=\"button-remove-filters\"\n                onClick={ resetFilters }\n              >\n                REMOVE FILTERS\n              </button>\n            </div>\n          </div>\n        )\n      }\n\n    </nav>\n  );\n}\n\nexport default Filters;\n","import React from 'react';\nimport './index.css';\nimport PlanetsProvider from './context/PlanetsProvider';\nimport Table from './components/Table';\nimport Filters from './components/Filters';\n\nfunction App() {\n  return (\n    <PlanetsProvider>\n      <h1>Star Wars Planets</h1>\n      <Filters />\n      <Table />\n    </PlanetsProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}